/* Input in notazione EBNF */

/* Token */
SEMICOLON     ::= ";" ;
ASSIGNMENT    ::= ":=" ;
SUM_DIF       ::= "+" | "-" ;
MUL_DIV       ::= "*" | "/" ;
LEF_PAR       ::= "(" ;
RIGHT_PAR     ::= ")" ;
WRITE         ::= "WRITE" ;
READ          ::= "READ" ;
IF            ::= "IF" ;
THEN          ::= "THEN" ;
ELSE          ::= "ELSE" ;
REPEAT        ::= "REPEAT" ;
UNTIL         ::= "UNTIL" ;
COMPARISON    ::= "==" | "!=" | "<" | "<=" | ">" | ">=" ;
ID            ::= [a-zA-Z][a-zA-Z0-9]* ;
NUMBER        ::= [0-9]+ ;

/* Regole di produzione */
<Program>::= <Statements> EOF ;
<Statements>::= <Statement> SEMICOLON <Statements> | <Statement> ;
<Statement>::= <CallRead> | <CallWrite> | <Assignment> | <IfThen> | <RepeatUntil> ;
<CallWrite>::= WRITE LEF_PAR ID RIGHT_PAR;
<CallRead>::= READ LEF_PAR ID RIGHT_PAR;
<Assignment>::= ID ASSIGNMENT <Expression>;
<Expression> ::= <Expression> SUM_DIF <MulDivExpr> | <MulDivExpr> ;
<MulDivExpr>::= <MulDivExpr> MUL_DIV <Factor> | <Factor> ;
<Factor>::= ID | NUMBER | (LEF_PAR <Expression> RIGHT_PAR) ;
<IfThen>::= IF <Condition> THEN <Statements> | IF <Condition> THEN <Statements> ELSE <Statements> ;
<Condition>::= <Expression> COMPARISON <Expression> ;
<RepeatUntil>::= REPEAT <Statements> UNTIL <Condition> ;