options {
    Static = false;
}

PARSER_BEGIN(gParser)

public class gParser {
    public static void main(String[] args) throws ParseException, FileNotFoundException {
        InputStream s;
        if(args.length > 0){
            String fileName = args[0];
            s = new FileInputStream(args[0]);
        } else {
            System.out.println(args.length);
            s = System.in;
        }

        gParserTokenManager tokenmanager = new gParserTokenManager(new SimpleCharStream(s));
        Token token;

        while ((token = tokenmanager.getNextToken()).kind != EOF) {
            System.out.println("lessema: " + token.image + " --> Token associato: " + tokenImage[token.kind]);
        }

}

PARSER_END(gParser)

TOKEN : {
    <NUMBER: "NUMBER">
    <REPEAT: "REPEAT">
    <UNTIL: "UNTIL">
    <WRITE: "WRITE">
    <READ: "READ">
    <MUL_DIV: "MUL_DIV">
    <LEF_PAR: "LEF_PAR">
    <SEMICOLON: "SEMICOLON">
    <SUM_DIF: "SUM_DIF">
    <ASSIGMENT: "ASSIGMENT">
    <ELSE: "ELSE">
    <RIGHT_PAR: "RIGHT_PAR">
    <THEN: "THEN">
    <END: "END">
    <ID: "ID">
    <EOF: "EOF">
    <IF: "IF">
    <COMPARISON: "COMPARISON">
    <(: "(">
    <): ")">
    <[: "[">
    <|: "|">
    <::=: "::=">
    <]: "]">
}

TOKEN: {
    <#LETTER: (["A"-"Z","a"-"z"]+)>
    | <#NUMBA: (["0"-"9"]+)>
}

SKIP : {
    < SKIPPED : [ " ", "\t", "\n", "\r"] >
    | <COMMENT: "{" (~["}"])* "}">
}


// Regole di produzione
void Program() :
{}
{null}

