options {
  STATIC = false;
}

PARSER_BEGIN(GrammarOut)
public class GrammarOut {
  public static void main(String[] args) throws ParseException {
    Grammar parser = new Grammar(System.in);
    parser.Program();
  }
}
PARSER_END(GrammarOut)

TOKEN : {
  <ID : ["a"-"z", "A"-"Z"](["a"-"z", "A"-"Z", "0"-"9"])*>
}

TOKEN : {
  <NUMBER : (["0"-"9"])+>
}

TOKEN : {
  <SEMICOLON : ";">
}

TOKEN : {
  <ASSIGNMENT : ":=">
}

TOKEN : {
  <SUM_DIF : "+" | "-">
}

TOKEN : {
  <MUL_DIV : "*" | "/">
}

TOKEN : {
  <LEF_PAR : "(">
}

TOKEN : {
  <RIGHT_PAR : ")">
}

TOKEN : {
  <WRITE : "WRITE">
}

TOKEN : {
  <READ : "READ">
}

TOKEN : {
  <IF : "IF">
}

TOKEN : {
  <THEN : "THEN">
}

TOKEN : {
  <ELSE : "ELSE">
}

TOKEN : {
  <END : "END">
}

TOKEN : {
  <REPEAT : "REPEAT">
}

TOKEN : {
  <UNTIL : "UNTIL">
}

TOKEN : {
  <COMPARISON : "==" | "!=" | "<" | "<=" | ">" | ">=">
}

void Program() :
{
}
{
 Statements()}

void Statements() :
{
}
{
 Statement() <SEMICOLON> Statements() Statement()}

void Statement() :
{
}
{
 CallRead() CallWrite() Assignment() IfThen() RepeatUntil()}

void CallWrite() :
{
}
{
 <WRITE> ( <ID> <NUMBER>)}

void CallRead() :
{
}
{
 <READ> ( <ID>)}

void Assignment() :
{
}
{
 <ID> <ASSIGNMENT> Expression()}

void Expression() :
{
}
{
 Expression() <SUM_DIF> MulDivExpr() MulDivExpr()}

void MulDivExpr() :
{
}
{
 MulDivExpr() <MUL_DIV> Factor() Factor()}

void Factor() :
{
}
{
 <ID> <NUMBER> ( <LEF_PAR> Expression() <RIGHT_PAR>)}

void IfThen() :
{
}
{
 <IF> Condition() <THEN> Statements() [ <ELSE> Statements()] <END>}

void Condition() :
{
}
{
 Expression() <COMPARISON> Expression()}

void RepeatUntil() :
{
}
{
 <REPEAT> Statements() <UNTIL> Condition()}

