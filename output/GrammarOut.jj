options {
  STATIC = false;
}

PARSER_BEGIN(GrammarOut)
public class GrammarOut {
  public static void main(String[] args) throws ParseException {
    Grammar parser = new Grammar(System.in);
    parser.Program();
  }
}
PARSER_END(GrammarOut)

TOKEN : {
  <SEMICOLON : ";">
}

TOKEN : {
  <ASSIGNMENT : ":=">
}

TOKEN : {
  <SUM_DIF : "+" | "-">
}

TOKEN : {
  <MUL_DIV : "*" | "/">
}

TOKEN : {
  <LEF_PAR : "(">
}

TOKEN : {
  <RIGHT_PAR : ")">
}

TOKEN : {
  <WRITE : "WRITE">
}

TOKEN : {
  <READ : "READ">
}

TOKEN : {
  <IF : "IF">
}

TOKEN : {
  <THEN : "THEN">
}

TOKEN : {
  <ELSE : "ELSE">
}

TOKEN : {
  <REPEAT : "REPEAT">
}

TOKEN : {
  <UNTIL : "UNTIL">
}

TOKEN : {
  <COMPARISON : "==" | "!=" | "<" | "<=" | ">" | ">=">
}

TOKEN : {
  <ID : ["a"-"z", "A"-"Z"](["a"-"z", "A"-"Z", "0"-"9"])*>
}

TOKEN : {
  <NUMBER : (["0"-"9"])+>
}

void Program() :
{
}
{
( Statements())* <EOF>}

void Statements() :
{
}
{
 Statement() [ StatementsSuffix()]}

void Statement() :
{
}
{
 CallRead() |
 CallWrite() |
 Assignment() |
 IfThen() |
 RepeatUntil()}

void CallRead() :
{
}
{
 <READ> <LEF_PAR> <ID> <RIGHT_PAR>}

void CallWrite() :
{
}
{
 <WRITE> <LEF_PAR> <ID> <RIGHT_PAR>}

void Assignment() :
{
}
{
 <ID> <ASSIGNMENT> Expression()}

void IfThen() :
{
}
{
 <IF> Condition() <THEN> Statements() [ IfThenSuffix()]}

void RepeatUntil() :
{
}
{
 <REPEAT> Statements() <UNTIL> Condition()}

void Expression() :
{
}
{
 MulDivExpr() [ ExpressionTail()]}

void MulDivExpr() :
{
}
{
 Factor() [ MulDivExprTail()]}

void Factor() :
{
}
{
 <ID> |
 <NUMBER> |
 ( <LEF_PAR> Expression() <RIGHT_PAR>)}

void Condition() :
{
}
{
 Expression() <COMPARISON> Expression()}

void MulDivExprTail() :
{
}
{
 <MUL_DIV> Factor() [ MulDivExprTail()]}

void ExpressionTail() :
{
}
{
 <SUM_DIF> MulDivExpr() [ ExpressionTail()]}

void IfThenSuffix() :
{
}
{
 <ELSE> Statements()}

void StatementsSuffix() :
{
}
{
 <SEMICOLON> Statements()}

