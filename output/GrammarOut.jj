options {
  STATIC = false;
}

PARSER_BEGIN(GrammarOut)
public class GrammarOut {
  public static void main(String[] args) throws ParseException {
    Grammar parser = new Grammar(System.in);
    parser.Program();
  }
}
PARSER_END(GrammarOut)

TOKEN : {
  <SEMICOLON : ";">
}

TOKEN : {
  <SELECT : "SELECT">
}

TOKEN : {
  <FROM : "FROM">
}

TOKEN : {
  <WHERE : "WHERE">
}

TOKEN : {
  <AND : "AND">
}

TOKEN : {
  <OR : "OR">
}

TOKEN : {
  <INSERT : "INSERT">
}

TOKEN : {
  <INTO : "INTO">
}

TOKEN : {
  <VALUES : "VALUES">
}

TOKEN : {
  <UPDATE : "UPDATE">
}

TOKEN : {
  <SET : "SET">
}

TOKEN : {
  <DELETE : "DELETE">
}

TOKEN : {
  <CREATE : "CREATE">
}

TOKEN : {
  <TABLE : "TABLE">
}

TOKEN : {
  <PRIMARY : "PRIMARY">
}

TOKEN : {
  <KEY : "KEY">
}

TOKEN : {
  <NOT : "NOT">
}

TOKEN : {
  <NULL : "NULL">
}

TOKEN : {
  <UNIQUE : "UNIQUE">
}

TOKEN : {
  <INT : "INT">
}

TOKEN : {
  <VARCHAR : "VARCHAR">
}

TOKEN : {
  <DATE : "DATE">
}

TOKEN : {
  <BOOLEAN : "BOOLEAN">
}

TOKEN : {
  <EQUALS : "=">
}

TOKEN : {
  <NOT_EQUALS : "<>">
}

TOKEN : {
  <LESS_THAN : "<">
}

TOKEN : {
  <GREATER_THAN : ">">
}

TOKEN : {
  <LESS_EQUAL : "<=">
}

TOKEN : {
  <GREATER_EQUAL : ">=">
}

TOKEN : {
  <COMMA : ",">
}

TOKEN : {
  <LEFT_PAREN : "(">
}

TOKEN : {
  <RIGHT_PAREN : ")">
}

TOKEN : {
  <DOT : ".">
}

TOKEN : {
  <STAR : "*">
}

TOKEN : {
  <IDENTIFIER : ["a"-"z", "A"-"Z"](["a"-"z", "A"-"Z", "0"-"9", "_"])*>
}

TOKEN : {
  <NUMBER_LITERAL : (["0"-"9"])+(("."(["0"-"9"])+))?>
}

TOKEN : {
  <COMPARISON :  |  |  |  |  | >
}

TOKEN : {
  <LOGIC_OP :  | >
}

void Program() :
{
}
{
 Statement() <SEMICOLON> [ ProgramTail()] <EOF>}

void Statement() :
{
}
{
 Select_Statement() |
 Insert_Statement() |
 Update_Statement() |
 Delete_Statement() |
 Create_Statement()}

void Select_Statement() :
{
}
{
 <SELECT> Column_List() <FROM> Table_List() [ Select_StatementSuffix()]}

void Insert_Statement() :
{
}
{
 <INSERT> <INTO> <IDENTIFIER> <LEFT_PAREN> Column_List() <RIGHT_PAREN> [ Insert_StatementSuffix()]}

void Update_Statement() :
{
}
{
 <UPDATE> <IDENTIFIER> <SET> Assignment_List() [ Update_StatementSuffix()]}

void Delete_Statement() :
{
}
{
 <DELETE> <FROM> <IDENTIFIER> [ Delete_StatementSuffix()]}

void Create_Statement() :
{
}
{
 <CREATE> <TABLE> <IDENTIFIER> <LEFT_PAREN> Column_Definition_List() <RIGHT_PAREN>}

void Column_List() :
{
}
{
 <STAR> |
 <IDENTIFIER> |
 <IDENTIFIER> <DOT> <IDENTIFIER> |
 <IDENTIFIER> <COMMA> Column_List() |
 <IDENTIFIER> <DOT> <IDENTIFIER> <COMMA> Column_List()}

void Table_List() :
{
}
{
 <IDENTIFIER> [ Table_ListSuffix()]}

void Condition() :
{
}
{
 Expression() [ ConditionTail()]}

void Expression() :
{
}
{
 Term() [ ExpressionTail()]}

void Term() :
{
}
{
 <IDENTIFIER> |
 <NUMBER_LITERAL> |
 <NULL>}

void Value_List() :
{
}
{
 Term() [ Value_ListTail()]}

void Assignment_List() :
{
}
{
 Assignment() [ Assignment_ListTail()]}

void Assignment() :
{
}
{
 <IDENTIFIER> <EQUALS> Term()}

void Column_Definition_List() :
{
}
{
 Column_Definition() [ Column_Definition_ListTail()]}

void Column_Definition() :
{
}
{
 <IDENTIFIER> Data_Type() [ Column_DefinitionSuffix()]}

void Data_Type() :
{
}
{
 <INT> |
 <VARCHAR> <LEFT_PAREN> <NUMBER_LITERAL> <RIGHT_PAREN> |
 <DATE> |
 <BOOLEAN>}

void Constraint() :
{
}
{
 <NOT> <NULL> |
 <PRIMARY> <KEY> |
 <UNIQUE>}

void Select_StatementSuffix() :
{
}
{
 <WHERE> Condition()}

void Delete_StatementSuffix() :
{
}
{
 <WHERE> Condition()}

void Update_StatementSuffix() :
{
}
{
 <WHERE> Condition()}

void Table_ListSuffix() :
{
}
{
 <COMMA> Table_List()}

void ProgramTail() :
{
}
{
 Statement() <SEMICOLON> [ ProgramTail()]}

void ConditionTail() :
{
}
{
 <LOGIC_OP> Expression() [ ConditionTail()]}

void ExpressionTail() :
{
}
{
 <COMPARISON> Term() [ ExpressionTail()]}

void Value_ListTail() :
{
}
{
 <COMMA> Term() [ Value_ListTail()]}

void Insert_StatementSuffix() :
{
}
{
 <VALUES> <LEFT_PAREN> Value_List() <RIGHT_PAREN> |
 <SELECT> Column_List() <FROM> Table_List()}

void Assignment_ListTail() :
{
}
{
 <COMMA> Assignment() [ Assignment_ListTail()]}

void Column_DefinitionSuffix() :
{
}
{
 Constraint()}

void Column_Definition_ListTail() :
{
}
{
 <COMMA> Column_Definition() [ Column_Definition_ListTail()]}

